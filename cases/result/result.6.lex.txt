
C-MINUS COMPILATION: cases/test/test.6.txt
	1: ERROR: #
	1: ID, name= include
	1: <
	1: ID, name= stdio
	1: ERROR: .
	1: ID, name= h
	1: >
	2: ERROR: #
	2: ID, name= include
	2: <
	2: ID, name= stdlib
	2: ERROR: .
	2: ID, name= h
	2: >
	3: ERROR: #
	3: ID, name= define
	3: ID, name= MALLOC
	3: ERROR: _
	3: ID, name= ERROR
	3: ID, name= printf
	3: (
	3: ERROR: "
	3: ID, name= Memory
	3: ID, name= allocation
	3: ID, name= error
	3: ERROR: \
	3: ID, name= n
	3: ERROR: "
	3: )
	5: reserved word: int
	5: ID, name= main
	5: (
	5: reserved word: void
	5: )
	5: {
	6: reserved word: int
	6: *
	6: ID, name= arr
	6: ;
	7: reserved word: int
	7: *
	7: ID, name= ans
	7: ;
	8: reserved word: int
	8: *
	8: ID, name= st1
	8: ;
	9: reserved word: int
	9: *
	9: ID, name= st2
	9: ;
	10: ID, name= char
	10: *
	10: ID, name= str
	10: ;
	11: ID, name= char
	11: ID, name= c
	11: ;
	12: reserved word: int
	12: ID, name= n
	12: ,
	12: ID, name= x
	12: ,
	12: ID, name= i
	12: ,
	12: ID, name= j
	12: ;
	14: ID, name= scanf
	14: (
	14: ERROR: "
	14: ERROR: %
	14: ID, name= d
	14: ERROR: "
	14: ,
	14: ERROR: &
	14: ID, name= n
	14: )
	14: ;
	16: ID, name= arr
	16: =
	16: (
	16: reserved word: int
	16: *
	16: )
	16: ID, name= malloc
	16: (
	16: ID, name= n
	16: *
	16: ID, name= sizeof
	16: (
	16: reserved word: int
	16: )
	16: )
	16: ;
	17: ID, name= str
	17: =
	17: (
	17: ID, name= char
	17: *
	17: )
	17: ID, name= malloc
	17: (
	17: NUM, val= 10
	17: *
	17: ID, name= n
	17: *
	17: ID, name= sizeof
	17: (
	17: ID, name= char
	17: )
	17: )
	17: ;
	18: reserved word: if
	18: (
	18: ID, name= arr
	18: ==
	18: ID, name= NULL
	18: ERROR: |
	18: ERROR: |
	18: ID, name= str
	18: ==
	18: ID, name= NULL
	18: )
	18: {
	19: ID, name= MALLOC
	19: ERROR: _
	19: ID, name= ERROR
	19: ;
	20: reserved word: return
	20: NUM, val= 1
	20: ;
	21: }
	23: ID, name= getchar
	23: (
	23: )
	23: ;
	24: ID, name= scanf
	24: (
	24: ERROR: "
	24: ERROR: %
	24: [
	24: NUM, val= 0
	24: -
	24: NUM, val= 9
	24: ]
	24: ERROR: "
	24: ,
	24: ID, name= str
	24: )
	24: ;
	26: ID, name= x
	26: =
	26: NUM, val= 0
	26: ;
	27: ID, name= i
	27: =
	27: NUM, val= 0
	27: ;
	28: ID, name= j
	28: =
	28: NUM, val= 0
	28: ;
	30: reserved word: while
	30: (
	30: NUM, val= 1
	30: )
	30: {
	31: ID, name= c
	31: =
	31: ID, name= str
	31: [
	31: ID, name= j
	31: +
	31: +
	31: ]
	31: ;
	32: reserved word: if
	32: (
	32: ID, name= c
	32: >=
	32: ERROR: '
	32: NUM, val= 0
	32: ERROR: '
	32: ERROR: &
	32: ERROR: &
	32: ID, name= c
	32: <=
	32: ERROR: '
	32: NUM, val= 9
	32: ERROR: '
	32: )
	32: {
	33: ID, name= x
	33: =
	33: (
	33: ID, name= x
	33: <
	33: <
	33: NUM, val= 3
	33: )
	33: +
	33: (
	33: ID, name= x
	33: <
	33: <
	33: NUM, val= 1
	33: )
	33: +
	33: ID, name= c
	33: -
	33: ERROR: '
	33: NUM, val= 0
	33: ERROR: '
	33: ;
	34: }
	35: reserved word: else
	35: {
	36: ID, name= arr
	36: [
	36: ID, name= i
	36: +
	36: +
	36: ]
	36: =
	36: ID, name= x
	36: ;
	37: ID, name= x
	37: =
	37: NUM, val= 0
	37: ;
	38: reserved word: if
	38: (
	38: ERROR: !
	38: ID, name= c
	38: )
	38: {
	39: ID, name= break
	39: ;
	40: }
	41: }
	42: }
	44: ID, name= free
	44: (
	44: ID, name= str
	44: )
	44: ;
	46: ID, name= ans
	46: =
	46: (
	46: reserved word: int
	46: *
	46: )
	46: ID, name= malloc
	46: (
	46: ID, name= n
	46: *
	46: ID, name= sizeof
	46: (
	46: reserved word: int
	46: )
	46: )
	46: ;
	47: ID, name= st1
	47: =
	47: (
	47: reserved word: int
	47: *
	47: )
	47: ID, name= malloc
	47: (
	47: ID, name= n
	47: *
	47: ID, name= sizeof
	47: (
	47: reserved word: int
	47: )
	47: )
	47: ;
	48: ID, name= st2
	48: =
	48: (
	48: reserved word: int
	48: *
	48: )
	48: ID, name= malloc
	48: (
	48: ID, name= n
	48: *
	48: ID, name= sizeof
	48: (
	48: reserved word: int
	48: )
	48: )
	48: ;
	49: reserved word: if
	49: (
	49: ID, name= ans
	49: ==
	49: ID, name= NULL
	49: ERROR: |
	49: ERROR: |
	49: ID, name= st1
	49: ==
	49: ID, name= NULL
	49: ERROR: |
	49: ERROR: |
	49: ID, name= st2
	49: ==
	49: ID, name= NULL
	49: )
	49: {
	50: ID, name= MALLOC
	50: ERROR: _
	50: ID, name= ERROR
	50: ;
	51: reserved word: return
	51: NUM, val= 2
	51: ;
	52: }
	54: ID, name= for
	54: (
	54: ID, name= i
	54: =
	54: NUM, val= 0
	54: ;
	54: ID, name= i
	54: <
	54: ID, name= n
	54: ;
	54: ID, name= i
	54: +
	54: +
	54: )
	54: {
	55: ID, name= ans
	55: [
	55: ID, name= i
	55: ]
	55: =
	55: NUM, val= 0
	55: ;
	56: }
	58: ID, name= j
	58: =
	58: -
	58: NUM, val= 1
	58: ;
	59: ID, name= for
	59: (
	59: ID, name= i
	59: =
	59: NUM, val= 0
	59: ;
	59: ID, name= i
	59: <
	59: ID, name= n
	59: ;
	59: ID, name= i
	59: +
	59: +
	59: )
	59: {
	60: reserved word: while
	60: (
	60: ID, name= j
	60: >=
	60: NUM, val= 0
	60: )
	60: {
	61: reserved word: if
	61: (
	61: ID, name= st1
	61: [
	61: ID, name= j
	61: ]
	61: >
	61: ID, name= arr
	61: [
	61: ID, name= i
	61: ]
	61: )
	61: {
	62: ID, name= ans
	62: [
	62: ID, name= i
	62: ]
	62: =
	62: ID, name= st2
	62: [
	62: ID, name= j
	62: ]
	62: ;
	63: ID, name= break
	63: ;
	64: }
	65: ID, name= j
	65: -
	65: -
	65: ;
	66: }
	68: ID, name= j
	68: +
	68: +
	68: ;
	69: ID, name= st1
	69: [
	69: ID, name= j
	69: ]
	69: =
	69: ID, name= arr
	69: [
	69: ID, name= i
	69: ]
	69: ;
	70: ID, name= st2
	70: [
	70: ID, name= j
	70: ]
	70: =
	70: ID, name= i
	70: +
	70: NUM, val= 1
	70: ;
	71: }
	73: ID, name= for
	73: (
	73: ID, name= i
	73: =
	73: NUM, val= 0
	73: ;
	73: ID, name= i
	73: <
	73: ID, name= n
	73: ;
	73: ID, name= i
	73: +
	73: +
	73: )
	73: {
	74: ID, name= printf
	74: (
	74: ERROR: "
	74: ERROR: %
	74: ID, name= d
	74: ERROR: "
	74: ,
	74: ID, name= ans
	74: [
	74: ID, name= i
	74: ]
	74: )
	74: ;
	75: }
	76: ID, name= printf
	76: (
	76: ERROR: "
	76: ERROR: \
	76: ID, name= n
	76: ERROR: "
	76: )
	76: ;
	78: ID, name= free
	78: (
	78: ID, name= arr
	78: )
	78: ;
	79: ID, name= free
	79: (
	79: ID, name= ans
	79: )
	79: ;
	80: ID, name= free
	80: (
	80: ID, name= st1
	80: )
	80: ;
	81: ID, name= free
	81: (
	81: ID, name= st2
	81: )
	81: ;
	83: reserved word: return
	83: NUM, val= 0
	83: ;
	84: }
	85: EOF
