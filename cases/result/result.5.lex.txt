
C-MINUS COMPILATION: cases/test/test.5.txt
	1: ERROR: #
	1: ID, name= include
	1: <
	1: ID, name= stdio
	1: ERROR: .
	1: ID, name= h
	1: >
	2: ERROR: #
	2: ID, name= include
	2: <
	2: ID, name= stdbool
	2: ERROR: .
	2: ID, name= h
	2: >
	3: ERROR: #
	3: ID, name= define
	3: ID, name= BUFSIZE
	3: NUM, val= 1
	3: <
	3: <
	3: NUM, val= 18
	4: ID, name= char
	4: ID, name= readbuf
	4: [
	4: ID, name= BUFSIZE
	4: ]
	4: ,
	4: ID, name= writebuf
	4: [
	4: ID, name= BUFSIZE
	4: ]
	4: ;
	5: reserved word: int
	5: ID, name= rp
	5: =
	5: ID, name= BUFSIZE
	5: ,
	5: ID, name= wp
	5: =
	5: NUM, val= 0
	5: ;
	6: ID, name= char
	6: ID, name= ReadChar
	6: (
	6: )
	6: {
	7: reserved word: if
	7: (
	7: ID, name= rp
	7: ==
	7: ID, name= BUFSIZE
	7: )
	7: {
	8: ID, name= fread
	8: (
	8: ID, name= readbuf
	8: ,
	8: NUM, val= 1
	8: ,
	8: ID, name= BUFSIZE
	8: ,
	8: ID, name= stdin
	8: )
	8: ;
	9: ID, name= rp
	9: =
	9: NUM, val= 0
	9: ;
	10: }
	11: reserved word: return
	11: ID, name= readbuf
	11: [
	11: ID, name= rp
	11: +
	11: +
	11: ]
	11: ;
	12: }
	13: reserved word: int
	13: ID, name= ReadInt
	13: (
	13: )
	13: {
	14: ID, name= char
	14: ID, name= c
	14: ;
	15: reserved word: int
	15: ID, name= ret
	15: =
	15: NUM, val= 0
	15: ;
	16: reserved word: while
	16: (
	16: ID, name= c
	16: <
	16: ERROR: '
	16: NUM, val= 0
	16: ERROR: '
	16: ERROR: |
	16: ERROR: |
	16: ID, name= c
	16: >
	16: ERROR: '
	16: NUM, val= 9
	16: ERROR: '
	16: )
	16: ID, name= c
	16: =
	16: ID, name= ReadChar
	16: (
	16: )
	16: ;
	17: reserved word: while
	17: (
	17: ID, name= c
	17: >=
	17: ERROR: '
	17: NUM, val= 0
	17: ERROR: '
	17: ERROR: &
	17: ERROR: &
	17: ID, name= c
	17: <=
	17: ERROR: '
	17: NUM, val= 9
	17: ERROR: '
	17: )
	17: {
	18: ID, name= ret
	18: =
	18: ID, name= ret
	18: *
	18: NUM, val= 10
	18: +
	18: (
	18: ID, name= c
	18: ERROR: &
	18: ERROR: 0xf
	18: )
	18: ;
	19: ID, name= c
	19: =
	19: ID, name= ReadChar
	19: (
	19: )
	19: ;
	20: }
	21: reserved word: return
	21: ID, name= ret
	21: ;
	22: }
	23: reserved word: void
	23: ID, name= WriteInt
	23: (
	23: reserved word: int
	23: ID, name= n
	23: )
	23: {
	24: reserved word: int
	24: ID, name= tmp
	24: =
	24: ID, name= n
	24: ;
	25: reserved word: int
	25: ID, name= cnt
	25: =
	25: NUM, val= 0
	25: ;
	26: reserved word: if
	26: (
	26: ID, name= n
	26: ==
	26: NUM, val= 0
	26: )
	26: {
	27: reserved word: if
	27: (
	27: ID, name= wp
	27: +
	27: NUM, val= 2
	27: >=
	27: ID, name= BUFSIZE
	27: )
	27: {
	28: ID, name= fwrite
	28: (
	28: ID, name= writebuf
	28: ,
	28: NUM, val= 1
	28: ,
	28: ID, name= wp
	28: ,
	28: ID, name= stdout
	28: )
	28: ;
	29: ID, name= wp
	29: =
	29: NUM, val= 0
	29: ;
	30: }
	31: ID, name= writebuf
	31: [
	31: ID, name= wp
	31: +
	31: +
	31: ]
	31: =
	31: NUM, val= 48
	31: ;
	32: ID, name= writebuf
	32: [
	32: ID, name= wp
	32: +
	32: +
	32: ]
	32: =
	32: ERROR: '
	32: ERROR: '
	32: ;
	33: reserved word: return
	33: ;
	34: }
	35: reserved word: while
	35: (
	35: ID, name= tmp
	35: >
	35: NUM, val= 0
	35: )
	35: {
	36: ID, name= cnt
	36: +
	36: +
	36: ;
	37: ID, name= tmp
	37: /
	37: =
	37: NUM, val= 10
	37: ;
	38: }
	39: reserved word: if
	39: (
	39: ID, name= wp
	39: +
	39: ID, name= cnt
	39: >=
	39: ID, name= BUFSIZE
	39: )
	39: {
	40: ID, name= fwrite
	40: (
	40: ID, name= writebuf
	40: ,
	40: NUM, val= 1
	40: ,
	40: ID, name= wp
	40: ,
	40: ID, name= stdout
	40: )
	40: ;
	41: ID, name= wp
	41: =
	41: NUM, val= 0
	41: ;
	42: }
	43: ID, name= writebuf
	43: [
	43: ID, name= wp
	43: +
	43: ID, name= cnt
	43: ]
	43: =
	43: ERROR: '
	43: ERROR: '
	43: ;
	44: reserved word: int
	44: ID, name= len
	44: =
	44: ID, name= cnt
	44: ;
	45: reserved word: while
	45: (
	45: ID, name= n
	45: )
	45: {
	46: ID, name= cnt
	46: -
	46: -
	46: ;
	47: ID, name= writebuf
	47: [
	47: ID, name= wp
	47: +
	47: ID, name= cnt
	47: ]
	47: =
	47: (
	47: ID, name= n
	47: ERROR: %
	47: NUM, val= 10
	47: )
	47: +
	47: NUM, val= 48
	47: ;
	48: ID, name= n
	48: /
	48: =
	48: NUM, val= 10
	48: ;
	49: }
	50: ID, name= wp
	50: +
	50: =
	50: ID, name= len
	50: +
	50: NUM, val= 1
	50: ;
	51: }
	53: reserved word: int
	53: ID, name= stack
	53: [
	53: NUM, val= 500002
	53: ]
	53: ;
	54: reserved word: int
	54: ID, name= tower
	54: [
	54: NUM, val= 500002
	54: ]
	54: ;
	55: reserved word: int
	55: ID, name= top
	55: =
	55: -
	55: NUM, val= 1
	55: ;
	57: reserved word: int
	57: ID, name= main
	57: (
	57: reserved word: void
	57: )
	57: {
	58: reserved word: int
	58: ID, name= N
	58: ,
	58: ID, name= val
	58: ;
	59: ID, name= tower
	59: [
	59: NUM, val= 0
	59: ]
	59: =
	59: ERROR: 0x
	59: ERROR: 7f
	59: ERROR: 7f
	59: ERROR: 7f
	59: ERROR: 7f
	59: ;
	60: ID, name= stack
	60: [
	60: ID, name= top
	60: ]
	60: =
	60: NUM, val= 0
	60: ;
	61: ID, name= N
	61: =
	61: ID, name= ReadInt
	61: (
	61: )
	61: ;
	62: ID, name= for
	62: (
	62: reserved word: int
	62: ID, name= i
	62: =
	62: NUM, val= 1
	62: ;
	62: ID, name= i
	62: <=
	62: ID, name= N
	62: ;
	62: ID, name= i
	62: +
	62: +
	62: )
	62: ID, name= tower
	62: [
	62: ID, name= i
	62: ]
	62: =
	62: ID, name= ReadInt
	62: (
	62: )
	62: ;
	63: ID, name= for
	63: (
	63: reserved word: int
	63: ID, name= i
	63: =
	63: NUM, val= 1
	63: ;
	63: ID, name= i
	63: <=
	63: ID, name= N
	63: ;
	63: ID, name= i
	63: +
	63: +
	63: )
	63: {
	64: reserved word: while
	64: (
	64: ID, name= tower
	64: [
	64: ID, name= stack
	64: [
	64: ID, name= top
	64: ]
	64: ]
	64: <
	64: ID, name= tower
	64: [
	64: ID, name= i
	64: ]
	64: )
	64: ID, name= top
	64: -
	64: -
	64: ;
	65: /
	65: /
	65: ID, name= printf
	65: (
	65: ERROR: "
	65: ERROR: %
	65: ID, name= d
	65: ERROR: "
	65: ,
	65: ID, name= stack
	65: [
	65: ID, name= top
	65: ]
	65: )
	65: ;
	66: ID, name= WriteInt
	66: (
	66: ID, name= stack
	66: [
	66: ID, name= top
	66: ]
	66: )
	66: ;
	67: ID, name= stack
	67: [
	67: +
	67: +
	67: ID, name= top
	67: ]
	67: =
	67: ID, name= i
	67: ;
	68: }
	69: ID, name= fwrite
	69: (
	69: ID, name= writebuf
	69: ,
	69: NUM, val= 1
	69: ,
	69: ID, name= wp
	69: ,
	69: ID, name= stdout
	69: )
	69: ;
	70: }
	71: EOF
